use std::convert::Infallible;

use crate::front::syntax::{*, Exp, ReplInstr::*};
use crate::front::token::Token;

grammar;

pub ReplInstr: ReplInstr = {
    <Exp> ":" <Typ> => Check(<>),
    <Exp> => Infer(<>),
}

pub Exp: Exp = {
    PiBinderKeyword <param:Parameter> "." <ret_typ:Exp> => Exp::from(Pi {<>}),
    FunBinderKeyword <param:Parameter> "->" <body:Exp> => Exp::from(Fun {<>}),
    "Absurd" <scr:Exp> "Return" "(" <motive_param:"identifier"> "." <motive_body:Exp> ")" => Exp::from(Absurd {<>}),
    ApplicativeExp,
};

ApplicativeExp: Exp = {
    <fun:ApplicativeExp> <arg:AtomicExp> => Exp::from(App {<>}),
    AtomicExp,
}

AtomicExp: Exp = {
    <"identifier"> => Exp::from(String::from(<>)),
    BottomKeyword => Exp::Bottom,
    "Univ" "@" <"level"> => Exp::from(<>),
    "(" <Exp> ")" => <>,
};

Typ: Typ = Exp;

Parameter: TypedName<Typ> = {
    "(" <name:"identifier"> ":" <typ:Typ> ")" => TypedName {<>},
};

BottomKeyword: () = {
    "Bottom" => (),
    "UnicodeBottom" => (),
};

PiBinderKeyword: () = {
    "Pi" => (),
    "UnicodePi" => (),
    "Forall" => (),
    "UnicodeForall" => (),
};

FunBinderKeyword: () = {
    "Fun" => (),
    "Lambda" => (),
    "UnicodeLambda" => (),
};

extern {
  type Error = Infallible;

  enum Token {
    "level" => Token::Level(<Level>),
    "identifier" => Token::Identifier(<String>),

    "(" => Token::LParen,
    ")" => Token::RParen,
    "->" => Token::Arrow,
    "@" => Token::At,
    ":" => Token::Colon,
    "," => Token::Comma,
    "." => Token::Dot,

    "Univ" => Token::Univ,
    "Forall" => Token::Forall,
    "UnicodeForall" => Token::UnicodeForall,
    "Pi" => Token::Pi,
    "UnicodePi" => Token::UnicodePi,
    "Fun" => Token::Fun,
    "Lambda" => Token::Lambda,
    "UnicodeLambda" => Token::UnicodeLambda,
    "Bottom" => Token::Bottom,
    "UnicodeBottom" => Token::UnicodeBottom,
    "Absurd" => Token::Absurd,
    "Return" => Token::Return,
  }
}
