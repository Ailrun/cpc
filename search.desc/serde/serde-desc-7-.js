searchState.loadedDescShard("serde", 7, "Calls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConstructs the associated searcher from <code>self</code> and the …\nChecks whether the pattern matches anywhere in the haystack\nChecks whether the pattern matches at the front of the …\nChecks whether the pattern matches at the back of the …\nPerforms the next search step starting from the front.\nPerforms the next search step starting from the back.\nFinds the next <code>Match</code> result. See <code>next()</code>.\nFinds the next <code>Match</code> result. See <code>next_back()</code>.\nFinds the next <code>Reject</code> result. See <code>next()</code> and <code>next_match()</code>.\nFinds the next <code>Reject</code> result. See <code>next_back()</code>.\nRemoves the pattern from the front of haystack, if it …\nRemoves the pattern from the back of haystack, if it …\nThe largest value that can be represented by this integer …\nThe smallest value that can be represented by this integer …\nThe largest value that can be represented by this integer …\nThe smallest value that can be represented by this integer …\nThe largest value that can be represented by this integer …\nThe smallest value that can be represented by this integer …\nThe largest value that can be represented by this integer …\nThe smallest value that can be represented by this integer …\nThe largest value that can be represented by this integer …\nThe smallest value that can be represented by this integer …\nA DeserializeSeed helper for implementing …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nTrait used by <code>Serialize</code> implementations to generically …\nThe error type when some error occurs during serialization.\nMust match the <code>Error</code> type of our <code>Serializer</code>.\nMust match the <code>Error</code> type of our <code>Serializer</code>.\nMust match the <code>Error</code> type of our <code>Serializer</code>.\nMust match the <code>Error</code> type of our <code>Serializer</code>.\nMust match the <code>Error</code> type of our <code>Serializer</code>.\nMust match the <code>Error</code> type of our <code>Serializer</code>.\nMust match the <code>Error</code> type of our <code>Serializer</code>.\nHelper type for implementing a <code>Serializer</code> that does not …\nThe output type produced by this <code>Serializer</code> during …\nMust match the <code>Ok</code> type of our <code>Serializer</code>.\nMust match the <code>Ok</code> type of our <code>Serializer</code>.\nMust match the <code>Ok</code> type of our <code>Serializer</code>.\nMust match the <code>Ok</code> type of our <code>Serializer</code>.\nMust match the <code>Ok</code> type of our <code>Serializer</code>.\nMust match the <code>Ok</code> type of our <code>Serializer</code>.\nMust match the <code>Ok</code> type of our <code>Serializer</code>.\nA <strong>data structure</strong> that can be serialized into any data …\nReturned from <code>Serializer::serialize_map</code>.\nType returned from <code>serialize_map</code> for serializing the …\nReturned from <code>Serializer::serialize_seq</code>.\nType returned from <code>serialize_seq</code> for serializing the …\nReturned from <code>Serializer::serialize_struct</code>.\nType returned from <code>serialize_struct</code> for serializing the …\nReturned from <code>Serializer::serialize_struct_variant</code>.\nType returned from <code>serialize_struct_variant</code> for …\nReturned from <code>Serializer::serialize_tuple</code>.\nType returned from <code>serialize_tuple</code> for serializing the …\nReturned from <code>Serializer::serialize_tuple_struct</code>.\nType returned from <code>serialize_tuple_struct</code> for serializing …\nReturned from <code>Serializer::serialize_tuple_variant</code>.\nType returned from <code>serialize_tuple_variant</code> for serializing …\nA <strong>data format</strong> that can serialize any data structure …\nCollect an iterator as a map.\nCollect an iterator as a sequence.\nSerialize a string produced by an implementation of <code>Display</code>…\nUsed when a <code>Serialize</code> implementation encounters any error …\nFinish serializing a sequence.\nFinish serializing a tuple.\nFinish serializing a tuple struct.\nFinish serializing a tuple variant.\nFinish serializing a map.\nFinish serializing a struct.\nFinish serializing a struct variant.\nThis module contains <code>Impossible</code> serializer and its …\nDetermine whether <code>Serialize</code> implementations should …\nSerialize this value into the given Serde serializer.\nSerialize a <code>bool</code> value.\nSerialize a chunk of raw byte data.\nSerialize a character.\nSerialize a sequence element.\nSerialize a tuple element.\nSerialize a map entry consisting of a key and a value.\nSerialize an <code>f32</code> value.\nSerialize an <code>f64</code> value.\nSerialize a tuple struct field.\nSerialize a tuple variant field.\nSerialize a struct field.\nSerialize a struct variant field.\nSerialize an <code>i128</code> value.\nSerialize an <code>i16</code> value.\nSerialize an <code>i32</code> value.\nSerialize an <code>i64</code> value.\nSerialize an <code>i8</code> value.\nSerialize a map key.\nBegin to serialize a map. This call must be followed by …\nSerialize a newtype struct like <code>struct Millimeters(u8)</code>.\nSerialize a newtype variant like <code>E::N</code> in <code>enum E { N(u8) }</code>.\nSerialize a <code>None</code> value.\nBegin to serialize a variably sized sequence. This call …\nSerialize a <code>Some(T)</code> value.\nSerialize a <code>&amp;str</code>.\nBegin to serialize a struct like …\nBegin to serialize a struct variant like <code>E::S</code> in …\nBegin to serialize a statically sized sequence whose …\nBegin to serialize a tuple struct like …\nBegin to serialize a tuple variant like <code>E::T</code> in …\nSerialize a <code>u128</code> value.\nSerialize a <code>u16</code> value.\nSerialize a <code>u32</code> value.\nSerialize a <code>u64</code> value.\nSerialize a <code>u8</code> value.\nSerialize a <code>()</code> value.\nSerialize a unit struct like <code>struct Unit</code> or <code>PhantomData&lt;T&gt;</code>.\nSerialize a unit variant like <code>E::A</code> in <code>enum E { A, B }</code>.\nSerialize a map value.\nIndicate that a struct field has been skipped.\nIndicate that a struct variant field has been skipped.\nSerialize a value that implements <code>Display</code> as a string, …\nHelper type for implementing a <code>Serializer</code> that does not …\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.")