searchState.loadedDescShard("miette", 0, "You run miette? You run her code like the software? Oh. …\nJust some help. Here’s how you could be doing it better.\nUse RGB colors even if the terminal does not support them\n“Raw” type for the byte offset from the beginning of a …\nCompatibility re-export of <code>WrapErr</code> for interop with <code>anyhow</code> …\n<code>ReportHandler</code> that renders plain text and avoids …\nAdds rich metadata to your Error that can be used by <code>Report</code>…\nContains the error value\nCompatibility re-export of <code>Report</code> for interop with <code>anyhow</code> …\nCritical failure. The program cannot continue. This is the …\nA <code>ReportHandler</code> that displays a given <code>Report</code> in a …\nTheme used by <code>GraphicalReportHandler</code> to render fancy …\nError indicating that <code>set_hook()</code> was unable to install the …\nConvenience trait that adds a <code>.into_diagnostic()</code> method …\nWrapper around <code>std::io::Error</code>. This is returned when …\n<code>ReportHandler</code> that renders JSON output. It’s a …\nA labeled <code>SourceSpan</code>.\nDiagnostic that can be created at runtime.\nError enum for miette. Used by certain operations in the …\nA <code>ReportHandler</code> that displays a given <code>Report</code> in a …\nCreate a custom <code>MietteHandler</code> from options.\nBasic implementation of the <code>SpanContents</code> trait, for …\nUtility struct for when you have a regular <code>SourceCode</code> type …\n<code>ReportHandler</code> that renders plain text and avoids …\nAlways use ANSI, regardless of terminal support for RGB\nContains the success value\nReturned when a <code>SourceSpan</code> extends beyond the bounds of a …\nUse RGB colors instead of ANSI if the terminal supports RGB\nCore Diagnostic wrapper type.\nError Report Handler trait for customizing <code>miette::Report</code>\ntype alias for <code>Result&lt;T, Report&gt;</code>\nSettings to control the color format used for graphical …\n<code>Diagnostic</code> severity. Intended to be used by <code>ReportHandler</code>s …\nRepresents readable source code of some sort.\nNewtype that represents the <code>ByteOffset</code> from the beginning …\nSpan within a <code>SourceCode</code>\nContents of a <code>SourceCode</code> covered by <code>SourceSpan</code>.\nCharacters to be used when drawing when using …\nStyles for various parts of graphical rendering for the …\nWarning. Please take note.\nProvides the <code>wrap_err()</code> method for <code>Result</code>.\nStyle to apply to things highlighted as “advice”.\nReturn early with an error.\nIterate over error <code>.source()</code> chains.\nCharacters to be used for drawing.\nUnique diagnostic code to look up more information about …\nThe 0-indexed column in the associated <code>SourceCode</code> where …\nCompatibility re-export of <code>wrap_err()</code> for interop with …\nCompatibility re-export of <code>wrap_err()</code> for interop with …\nReference to the data inside the associated span, in bytes.\nDefine the report format\nConstruct a <code>MietteDiagnostic</code> in more user-friendly way.\nIterate over error <code>.diagnostic_source()</code> chains.\nDefault trait implementations for <code>Diagnostic</code>.\nReturn early with an error if a condition is not satisfied.\nStyle to apply to things highlighted as “error”.\nReporters included with <code>miette</code>.\nStyle to apply to the help text.\nAdditional help text related to this Diagnostic\nThis module provides a trait for creating custom syntax …\nStyles to cycle through (using <code>.iter().cycle()</code>), to render …\nConverts <code>Result</code> types that return regular <code>std::error::Error</code>…\nLabels to apply to this <code>Diagnostic</code>’s …\nThe total length of the span\nThe 0-indexed line in the associated <code>SourceCode</code> where the …\nTotal number of lines covered by this <code>SpanContents</code>.\nStyle to apply to filenames/links/URLs.\nStyle to apply to line numbers.\nDisplayed diagnostic message\nConstruct an ad-hoc <code>Report</code>.\nThe start of the span.\nThis module defines the core of the miette protocol: a …\nRead the bytes for a specific span from this <code>SourceCode</code>, …\nSet the error hook.\nTells miette to render panics using its rendering engine.\n<code>Diagnostic</code> severity. Intended to be used by <code>ReportHandler</code>s …\nDefault trait implementations for <code>SourceCode</code>.\n<code>SourceSpan</code> representing the span covered by this …\nStyles to be used for painting.\nURL to visit for a more detailed explanation/help about …\nStyle to apply to things highlighted as “warning”.\nCompatibility re-export of <code>wrap_err_with()</code> for interop …\nCompatibility re-export of <code>wrap_err_with()</code> for interop …\nWrap the error value with a new adhoc error\nWrap the error value with a new adhoc error\nWrap the error value with a new adhoc error that is …\nWrap the error value with a new adhoc error that is …\nIterator of a chain of source errors.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nIterator of a chain of cause errors.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nWrapper around <code>std::io::Error</code>. This is returned when …\nError enum for miette. Used by certain operations in the …\nReturned when a <code>SourceSpan</code> extends beyond the bounds of a …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCompatibility re-export of <code>WrapErr</code> for interop with <code>anyhow</code>\nContains the error value\nCompatibility re-export of <code>Report</code> for interop with <code>anyhow</code>\nError indicating that <code>set_hook()</code> was unable to install the …\nContains the success value\nCore Diagnostic wrapper type.\nError Report Handler trait for customizing <code>miette::Report</code>\ntype alias for <code>Result&lt;T, Report&gt;</code>\nProvides the <code>wrap_err()</code> method for <code>Result</code>.\nAn iterator of the chain of source errors contained by …\nCompatibility re-export of <code>wrap_err()</code> for interop with …\nCompatibility re-export of <code>wrap_err</code> for interop with <code>anyhow</code>\nDefine the report format\nOverride for the <code>Display</code> format\nOverride for the <code>Display</code> format\nAttempt to downcast the error object to a concrete type.\nDowncast this error object by mutable reference.\nDowncast this error object by reference.\nReturns the argument unchanged.\nReturns the argument unchanged.\nConstruct a <code>Report</code> directly from an error-like type\nGet a reference to the Handler for this Report.\nGet a mutable reference to the Handler for this Report.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns true if <code>E</code> is the type held by this error object.\nCreate a new error object from a printable error message.\nCreate a new error object from any error type.\nCreate a new error object from a boxed <code>Diagnostic</code>.\nThe lowest level cause of this error — this error’s …\nSet the error hook.\nStore the location of the caller who constructed this …\nStore the location of the caller who constructed this …\nCompatibility re-export of <code>wrap_err_with()</code> for interop …\nProvide source code for this error\nWrap the error value with a new adhoc error\nCreate a new error from an error message to wrap the …\nWrap the error value with a new adhoc error that is …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConvenience <code>Diagnostic</code> that can be used as an “anonymous…\nConvenience trait that adds a <code>.into_diagnostic()</code> method …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nConverts <code>Result</code> types that return regular <code>std::error::Error</code>…\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nA raw pointer that represents a unique borrow of its …\nA raw pointer that owns its pointee\nA raw pointer that represents a shared borrow of its …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nUse RGB colors even if the terminal does not support them\nA <code>ReportHandler</code> that displays a given <code>Report</code> in a …\nCreate a custom <code>MietteHandler</code> from options.\nAlways use ANSI, regardless of terminal support for RGB\nUse RGB colors instead of ANSI if the terminal supports RGB\nSettings to control the color format used for graphical …\nIf true, long words can be broken when wrapping.\nBuilds a <code>MietteHandler</code> from this builder.\nIf true, colors will be used during graphical rendering, …\nSets the number of context lines before and after a span …\nSet a footer to be displayed at the bottom of the report.\nIf true, graphical rendering will be used regardless of …\nIf true, forces use of the narrated renderer.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nSet a graphical theme for the handler when rendering in …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreates a new <code>MietteHandler</code> with default settings.\nCreate a new <code>MietteHandlerOpts</code>.\nControls which color format to use if colors are used in …\nSet the displayed tab width in spaces.\nIf true, specify whether the graphical handler will make …\nIf true, forces unicode display for graphical output. If …\nSets the width to wrap the report at. Defaults to 80.\nInclude the cause chain of the top-level error in the …\nSet a syntax highlighter when rendering in graphical mode. …\nDo not include the cause chain of the top-level error in …\nDisables syntax highlighting when rendering in graphical …\nSets the <code>textwrap::WordSeparator</code> to use when determining …\nSets the <code>textwrap::WordSplitter</code> to use when determining …\nIf true, long lines can be wrapped.\n<code>ReportHandler</code> that renders plain text and avoids …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCreate a new <code>NarratableReportHandler</code> There are no …\nRender a <code>Diagnostic</code>. This function is mostly internal and …\nA <code>ReportHandler</code> that displays a given <code>Report</code> in a …\nwe’re rendering a multiline label\nwe’re rendering the rest of a multiline label\nwe’re rendering a single line label (or not rendering in …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nthis is deliberately an option of a vec because I wanted …\nReturns an iterator over the visual width of each …\nCreate a new <code>GraphicalReportHandler</code> with the default …\nCreate a new <code>GraphicalReportHandler</code> with a given …\nRenders a line to the output formatter, replacing tabs …\nRender a <code>Diagnostic</code>. This function is mostly internal and …\nReturns whether <code>span</code> should be visible on this line, …\nReturns whether <code>span</code> should be visible on this line in the …\nSet the displayed tab width in spaces.\nReturns the visual column position of a byte offset on a …\nEnables or disables breaking of words during wrapping.\nInclude the cause chain of the top-level error in the …\nSets the number of lines of context to show around each …\nSets the ‘global’ footer for this handler.\nSets the display text for links. Miette displays <code>(link)</code> if …\nWhether to enable error code linkification using …\nEnable syntax highlighting for source code snippets, using …\nSet a theme for this handler.\nWhether to include <code>Diagnostic::url()</code> in the output.\nSets the width to wrap the report at.\nSets the word separator to use when wrapping.\nSets the word splitter to use when wrapping.\nEnables or disables wrapping of lines to fit the width.\nDo not include the cause chain of the top-level error in …\nDisable syntax highlighting. This uses the …\n<code>ReportHandler</code> that renders JSON output. It’s a …\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreate a new <code>JSONReportHandler</code>. There are no customization …\nRender a <code>Diagnostic</code>. This function is mostly internal and …\n<code>ReportHandler</code> that renders plain text and avoids …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreate a new <code>NarratableReportHandler</code>. There are no …\nRender a <code>Diagnostic</code>. This function is mostly internal and …\nReturns column at offset, and nearest boundary if offset …\nInclude the cause chain of the top-level error in the …\nSets the number of lines of context to show around each …\nSet the footer to be displayed at the end of the report.\nDo not include the cause chain of the top-level error in …\nTheme used by <code>GraphicalReportHandler</code> to render fancy …\nCharacters to be used when drawing when using …\nStyles for various parts of graphical rendering for the …\nStyle to apply to things highlighted as “advice”.\nANSI color-based styles.\nASCII-art-based graphical drawing, with ANSI styling.\nASCII-art-based graphical elements. Works well on older …\nCharacters to be used for drawing.\nEmoji-heavy unicode characters.\nStyle to apply to things highlighted as “error”.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nStyle to apply to the help text.\nStyles to cycle through (using <code>.iter().cycle()</code>), to render …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nStyle to apply to filenames/links/URLs.\nStyle to apply to line numbers.\nA “basic” graphical theme that skips colors and …\nNo styling. Just regular ol’ monochrome.\nNice RGB colors. Credit.\nStyles to be used for painting.\nGraphical theme that draws using both ansi colors and …\nFancy unicode-based graphical elements.\nGraphical theme that draws in monochrome, while still …\nStyle to apply to things highlighted as “warning”.\nThe default syntax highlighter. It applies <code>Style::default()</code>…\nThe default highlighter state. It applies <code>Style::default()</code> …\nA syntax highlighter for highlighting miette <code>SourceCode</code> …\nA stateful highlighter that incrementally highlights lines …\nArcified trait object for Highlighter. Used internally by […\nReturns the argument unchanged.\nHighlight an individual line from the source code by …\nCalls <code>U::from(self)</code>.\nCreates a new <code>HighlighterState</code> to begin parsing and …\nThe default syntax highlighter. It applies <code>Style::default()</code>…\nThe default highlighter state. It applies <code>Style::default()</code> …\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nDiagnostic that can be created at runtime.\nReturn new diagnostic with new label added to the existing …\nReturn new diagnostic with new labels added to the …\nUnique diagnostic code to look up more information about …\nReturns the argument unchanged.\nAdditional help text related to this Diagnostic\nCalls <code>U::from(self)</code>.\nLabels to apply to this <code>Diagnostic</code>’s …\nDisplayed diagnostic message\nCreate a new dynamic diagnostic with the given message.\n<code>Diagnostic</code> severity. Intended to be used by <code>ReportHandler</code>s …\nURL to visit for a more detailed explanation/help about …\nReturn new diagnostic with the given code.\nReturn new diagnostic with the given help message.\nReturn new diagnostic with the given label.\nReturn new diagnostic with the given labels.\nReturn new diagnostic with the given severity.\nReturn new diagnostic with the given URL.\nUtility struct for when you have a regular <code>SourceCode</code> type …\nReturns the argument unchanged.\nReturns a reference the inner <code>SourceCode</code> type for this …\nCalls <code>U::from(self)</code>.\nGets the name of this <code>NamedSource</code>.\nCreate a new <code>NamedSource</code> using a regular <code>SourceCode</code> and …\nSets the <code>language</code> for this source code.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nTells miette to render panics using its rendering engine.\nJust some help. Here’s how you could be doing it better.\n“Raw” type for the byte offset from the beginning of a …\nAdds rich metadata to your Error that can be used by <code>Report</code>…\nCritical failure. The program cannot continue. This is the …\nA labeled <code>SourceSpan</code>.\nBasic implementation of the <code>SpanContents</code> trait, for …\n<code>Diagnostic</code> severity. Intended to be used by <code>ReportHandler</code>s …\nRepresents readable source code of some sort.\nNewtype that represents the <code>ByteOffset</code> from the beginning …\nSpan within a <code>SourceCode</code>\nContents of a <code>SourceCode</code> covered by <code>SourceSpan</code>.\nWarning. Please take note.\nMakes a new label at specified span\nMakes a new label that points at a specific offset.\nUnique diagnostic code that can be used to look up more …\nUnique diagnostic code that can be used to look up more …\nThe 0-indexed column in the associated <code>SourceCode</code> where …\nReference to the data inside the associated span, in bytes.\nThe cause of the error.\nThe cause of the error.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nPanics\nReturns the argument unchanged.\nReturns an offset for the <em>file</em> location of wherever this …\nLittle utility to help convert 1-based line/column …\nAdditional help text related to this <code>Diagnostic</code>. Do you …\nAdditional help text related to this <code>Diagnostic</code>. Do you …\nReturns a reference to the inner <code>SourceSpan</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nTrue if this <code>LabeledSpan</code> is empty.\nWhether this <code>SourceSpan</code> has a length of zero. It may still …\nGets the (optional) label string for this <code>LabeledSpan</code>.\nLabels to apply to this <code>Diagnostic</code>’s …\nLabels to apply to this <code>Diagnostic</code>’s …\nOptional method. The language name for this source code, …\nOptional method. The language name for this source code, …\nReturns the number of bytes this <code>LabeledSpan</code> spans.\nTotal length of the <code>SourceSpan</code>, in bytes.\nThe total length of the span\nThe 0-indexed line in the associated <code>SourceCode</code> where the …\nTotal number of lines covered by this <code>SpanContents</code>.\nAn optional (file?) name for the container of this …\nAn optional (file?) name for the container of this …\nMakes a new labeled span.\nMake a new <code>MietteSpanContents</code> object.\nCreate a new <code>SourceSpan</code>.\nMake a new <code>MietteSpanContents</code> object, with a name for its …\nMakes a new labeled primary span using an existing span.\nMakes a new labeled span using an existing span.\nReturns the 0-based starting byte offset.\nThe absolute offset, in bytes, from the beginning of a …\nActual byte offset.\nThe start of the span.\nTrue if this <code>LabeledSpan</code> is a primary span.\nRead the bytes for a specific span from this <code>SourceCode</code>, …\nAdditional related <code>Diagnostic</code>s.\nAdditional related <code>Diagnostic</code>s.\nChange the text of the label\nDiagnostic severity. This may be used by <code>ReportHandler</code>s to …\nDiagnostic severity. This may be used by <code>ReportHandler</code>s to …\nSource code to apply this <code>Diagnostic</code>’s <code>Diagnostic::labels</code>…\nSource code to apply this <code>Diagnostic</code>’s <code>Diagnostic::labels</code>…\n<code>SourceSpan</code> representing the span covered by this …\nMakes a new label without text, that underlines a specific …\nURL to visit for a more detailed explanation/help about …\nURL to visit for a more detailed explanation/help about …\nSets the <code>language</code> for syntax highlighting.")