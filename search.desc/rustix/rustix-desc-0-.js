searchState.loadedDescShard("rustix", 0, "<code>rustix</code> provides efficient memory-safe and I/O-safe …\nThe linux_raw backend.\nThe <code>bitcast</code> and <code>bitflags_bits</code> macros.\nUtilities to help with buffering.\nA macro for <code>CStr</code> literals.\nExport the <code>*Fd</code> types and traits that are used in rustix’…\nUtilities related to FFI bindings.\nI/O operations.\nUnsafe <code>ioctl</code> API.\nImports from <code>std</code> that would be polyfilled for <code>no_std</code> …\nThe <code>Pid</code> type.\nTerminal I/O stream operations.\nMiscellaneous minor utilities.\nSupport for “weak linkage” to symbols on Unix\nThe maximum number of buffers that can be passed into a …\nArchitecture-specific syscall code.\nAdapt the Linux API to resemble a POSIX-style libc API.\nConvert values to <code>ArgReg</code> and from <code>RetReg</code>.\nEncapsulation for system call arguments and return values.\nx86-64 Linux system calls.\nLike <code>syscall</code>, but adds the <code>readonly</code> attribute to the …\nEquivalent to C’s <code>void</code> type when used as a pointer.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConvert a <code>c_int</code> into an <code>ArgReg</code>.\nConvert a <code>c_uint</code> into an <code>ArgReg</code>.\nDeliberately pass <code>-1</code> to a file-descriptor argument, for …\nConvert an optional mutable reference into a <code>usize</code> for …\nPass an arbitrary <code>usize</code> value.\nPass a raw file-descriptor argument. Most users should use …\nConvert a <code>usize</code> returned from a syscall that effectively …\nConvert a <code>usize</code> returned from a syscall that effectively …\nConvert a <code>c_int</code> returned from a syscall that effectively …\nConvert a <code>usize</code> returned from a syscall that effectively …\nConvert a <code>c_uint</code> returned from a syscall that effectively …\nConvert the return value of <code>dup2</code> and <code>dup3</code>.\nConvert a <code>usize</code> returned from a syscall that effectively …\nConvert a <code>usize</code> returned from a syscall that effectively …\nConvert a <code>usize</code> returned from a syscall that effectively …\nConvert a <code>usize</code> returned from a syscall that effectively …\nConvert a <code>usize</code> returned from a syscall that effectively …\nConvert a <code>usize</code> returned from a syscall that effectively …\nPass the <code>mem::size_of</code> of a type.\nPass a zero, or null, argument.\nA trait to borrow the file descriptor from an underlying …\nA trait to extract the raw file descriptor from an …\nA borrowed file descriptor.\nA trait to express the ability to construct an object from …\nA trait to express the ability to consume an object and …\nAn owned file descriptor.\nRaw file descriptors.\nBorrows the file descriptor.\nExtracts the raw file descriptor.\nConstructs a new instance of <code>Self</code> from the given raw file …\nConsumes this object, returning the raw underlying file …\nThe <code>rustix</code> <code>Errno</code> type.\nlinux_raw syscalls supporting <code>rustix::io</code>.\n<code>EACCES</code>\n<code>EADDRINUSE</code>\n<code>EADDRNOTAVAIL</code>\n<code>EADV</code>\n<code>EAFNOSUPPORT</code>\n<code>EAGAIN</code>\n<code>EALREADY</code>\n<code>EBADE</code>\n<code>EBADF</code>\n<code>EBADFD</code>\n<code>EBADMSG</code>\n<code>EBADR</code>\n<code>EBADRQC</code>\n<code>EBADSLT</code>\n<code>EBFONT</code>\n<code>EBUSY</code>\n<code>ECANCELED</code>\n<code>ECHILD</code>\n<code>ECHRNG</code>\n<code>ECOMM</code>\n<code>ECONNABORTED</code>\n<code>ECONNREFUSED</code>\n<code>ECONNRESET</code>\n<code>EDEADLK</code>\n<code>EDEADLOCK</code>\n<code>EDESTADDRREQ</code>\n<code>EDOM</code>\n<code>EDOTDOT</code>\n<code>EDQUOT</code>\n<code>EEXIST</code>\n<code>errno</code>—An error code.\n<code>EFAULT</code>\n<code>EFBIG</code>\n<code>EHOSTDOWN</code>\n<code>EHOSTUNREACH</code>\n<code>EHWPOISON</code>\n<code>EIDRM</code>\n<code>EILSEQ</code>\n<code>EINPROGRESS</code>\n<code>EINTR</code>.\n<code>EINVAL</code>\n<code>EIO</code>\n<code>EISCONN</code>\n<code>EISDIR</code>\n<code>EISNAM</code>\n<code>EKEYEXPIRED</code>\n<code>EKEYREJECTED</code>\n<code>EKEYREVOKED</code>\n<code>EL2HLT</code>\n<code>EL2NSYNC</code>\n<code>EL3HLT</code>\n<code>EL3RST</code>\n<code>ELIBACC</code>\n<code>ELIBBAD</code>\n<code>ELIBEXEC</code>\n<code>ELIBMAX</code>\n<code>ELIBSCN</code>\n<code>ELNRNG</code>\n<code>ELOOP</code>\n<code>EMEDIUMTYPE</code>\n<code>EMFILE</code>\n<code>EMLINK</code>\n<code>EMSGSIZE</code>\n<code>EMULTIHOP</code>\n<code>ENAMETOOLONG</code>\n<code>ENAVAIL</code>\n<code>ENETDOWN</code>\n<code>ENETRESET</code>\n<code>ENETUNREACH</code>\n<code>ENFILE</code>\n<code>ENOANO</code>\n<code>ENOBUFS</code>\n<code>ENOCSI</code>\n<code>ENODATA</code>\n<code>ENODEV</code>\n<code>ENOENT</code>\n<code>ENOEXEC</code>\n<code>ENOKEY</code>\n<code>ENOLCK</code>\n<code>ENOLINK</code>\n<code>ENOMEDIUM</code>\n<code>ENOMEM</code>\n<code>ENOMSG</code>\n<code>ENONET</code>\n<code>ENOPKG</code>\n<code>ENOPROTOOPT</code>\n<code>ENOSPC</code>\n<code>ENOSR</code>\n<code>ENOSTR</code>\n<code>ENOSYS</code>\n<code>ENOTBLK</code>\n<code>ENOTCONN</code>\n<code>ENOTDIR</code>\n<code>ENOTEMPTY</code>\n<code>ENOTNAM</code>\n<code>ENOTRECOVERABLE</code>\n<code>ENOTSOCK</code>\n<code>ENOTSUP</code>\n<code>ENOTTY</code>\n<code>ENOTUNIQ</code>\n<code>ENXIO</code>\n<code>EOPNOTSUPP</code>\n<code>EOVERFLOW</code>\n<code>EOWNERDEAD</code>\n<code>EPERM</code>\n<code>EPFNOSUPPORT</code>\n<code>EPIPE</code>\n<code>EPROTO</code>\n<code>EPROTONOSUPPORT</code>\n<code>EPROTOTYPE</code>\n<code>ERANGE</code>\n<code>EREMCHG</code>\n<code>EREMOTE</code>\n<code>EREMOTEIO</code>\n<code>ERESTART</code>\n<code>ERFKILL</code>\n<code>EROFS</code>\n<code>ESHUTDOWN</code>\n<code>ESOCKTNOSUPPORT</code>\n<code>ESPIPE</code>\n<code>ESRCH</code>\n<code>ESRMNT</code>\n<code>ESTALE</code>\n<code>ESTRPIPE</code>\n<code>ETIME</code>\n<code>ETIMEDOUT</code>\n<code>E2BIG</code>\n<code>ETOOMANYREFS</code>\n<code>ETXTBSY</code>\n<code>EUCLEAN</code>\n<code>EUNATCH</code>\n<code>EUSERS</code>\n<code>EWOULDBLOCK</code>\n<code>EXDEV</code>\n<code>EXFULL</code>\nReturns the argument unchanged.\nConvert from a C <code>errno</code> value (which is positive) to an …\nExtract an <code>Errno</code> value from a <code>std::io::Error</code>.\nConstruct an <code>Errno</code> from a raw OS error number.\nCalls <code>U::from(self)</code>.\nShorthand for <code>std::io::Error::from(self).kind()</code>.\nExtract the raw OS error number from this error.\nCheck for an error from the result of a syscall which …\nCheck for an error from the result of a syscall which …\nCheck for an error from the result of a syscall which …\nCheck for an error from the result of a syscall which …\nCheck for an error from the result of a syscall which …\nCheck for an error from the result of a syscall which …\nCheck for an error from the result of a syscall which …\n<code>RWF_APPEND</code> (since Linux 4.16)\n<code>FD_CLOEXEC</code>\n<code>O_CLOEXEC</code>\n<code>RWF_DSYNC</code> (since Linux 4.7)\n<code>O_*</code> constants for use with <code>dup2</code>.\n<code>FD_*</code> constants for use with <code>fcntl_getfd</code> and <code>fcntl_setfd</code>.\n<code>RWF_HIPRI</code> (since Linux 4.6)\n<code>RWF_NOWAIT</code> (since Linux 4.14)\n<code>RWF_*</code> constants for use with <code>preadv2</code> and <code>pwritev2</code>.\n<code>RWF_SYNC</code> (since Linux 4.7)\nGet a flags value with all known bits set.\nGet a flags value with all known bits set.\nGet a flags value with all known bits set.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nGet the underlying bits value.\nGet the underlying bits value.\nGet the underlying bits value.\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nWhether all set bits in a source flags value are also set …\nWhether all set bits in a source flags value are also set …\nWhether all set bits in a source flags value are also set …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nGet a flags value with all bits unset.\nGet a flags value with all bits unset.\nGet a flags value with all bits unset.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nConvert from a bits value.\nConvert from a bits value.\nConvert from a bits value.\nConvert from a bits value exactly.\nConvert from a bits value exactly.\nConvert from a bits value exactly.\nConvert from a bits value, unsetting any unknown bits.\nConvert from a bits value, unsetting any unknown bits.\nConvert from a bits value, unsetting any unknown bits.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nGet a flags value with the bits of a flag with the given …\nGet a flags value with the bits of a flag with the given …\nGet a flags value with the bits of a flag with the given …\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nWhether any set bits in a source flags value are also set …\nWhether any set bits in a source flags value are also set …\nWhether any set bits in a source flags value are also set …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nWhether all known bits in this flags value are set.\nWhether all known bits in this flags value are set.\nWhether all known bits in this flags value are set.\nWhether all bits in this flags value are unset.\nWhether all bits in this flags value are unset.\nWhether all bits in this flags value are unset.\nYield a set of contained flags values.\nYield a set of contained flags values.\nYield a set of contained flags values.\nYield a set of contained named flags values.\nYield a set of contained named flags values.\nYield a set of contained named flags values.\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nCall <code>insert</code> when <code>value</code> is <code>true</code> or <code>remove</code> when <code>value</code> is …\nCall <code>insert</code> when <code>value</code> is <code>true</code> or <code>remove</code> when <code>value</code> is …\nCall <code>insert</code> when <code>value</code> is <code>true</code> or <code>remove</code> when <code>value</code> is …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nSyscall arguments use register-sized types. We use a …\nTo preserve provenance, syscall arguments and return …\nSyscall return values use register-sized types. We use a …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nConvert <code>raw</code> from a value produced by a syscall machine …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nEncode a system call number (a <code>__NR_*</code> constant) as a …\nSeal our various traits using the technique documented here…\nEncode a system call argument as an <code>ArgReg</code>.\nConvert <code>self</code> to a <code>usize</code> ready to be passed to a syscall …\nlinux_raw syscalls supporting <code>rustix::termios</code>.\nA wrapper around a conceptual <code>cfsetispeed</code> which handles an …\nA wrapper around a conceptual <code>cfsetospeed</code> which handles an …\nA wrapper around a conceptual <code>cfsetspeed</code> which handles an …\nImplement <code>tcgetattr</code> using the old <code>TCGETS</code> ioctl.\nImplement <code>tcsetattr</code> using the old <code>TCSETS</code> ioctl.\nReturn a <code>bitcast</code> of the value of <code>$x.bits()</code>, where <code>$x</code> is a …\nSplit an uninitialized byte slice into initialized and …\nA trait to borrow the file descriptor from an underlying …\nA trait to extract the raw file descriptor from an …\nA borrowed file descriptor.\nA trait to express the ability to construct an object from …\nA trait to express the ability to consume an object and …\nAn owned file descriptor.\nRaw file descriptors.\nBorrows the file descriptor.\nExtracts the raw file descriptor.\nReturns a <code>BorrowedFd</code> holding the given raw file descriptor.\nTakes ownership of a <code>ChildStderr</code>’s file descriptor.\nTakes ownership of a <code>ChildStdin</code>’s file descriptor.\nReturns the argument unchanged.\nTakes ownership of a <code>TcpStream</code>’s socket file descriptor.\nTakes ownership of a <code>TcpListener</code>’s socket file …\nTakes ownership of a <code>UdpSocket</code>’s file descriptor.\nTakes ownership of a <code>UnixDatagram</code>’s socket file …\nTakes ownership of a <code>UnixListener</code>’s socket file …\nTakes ownership of a <code>UnixStream</code>’s socket file descriptor.\nTakes ownership of a <code>ChildStdout</code>’s file descriptor.\nTakes ownership of a <code>File</code>’s underlying file descriptor.\nReturns the argument unchanged.\nConstructs a new instance of <code>Self</code> from the given raw file …\nConstructs a new instance of <code>Self</code> from the given raw file …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConsumes this object, returning the raw underlying file …\nCreates a new <code>OwnedFd</code> instance that shares the same …\nCreates a new <code>OwnedFd</code> instance that shares the same …\nRepresentation of a borrowed C string.\nA type representing an owned, C-compatible, nul-terminated …\nAn error indicating that a nul byte was not in the …\nAn error indicating that an interior nul byte was found.\nReturns the contents of this <code>CString</code> as a slice of bytes.\nEquivalent to <code>CString::as_bytes()</code> except that the returned …\nExtracts a <code>CStr</code> slice containing the entire string.\nReturns the inner pointer to this C string.\nIterates over the bytes in this C string.\nEquivalent to C’s <code>char</code> type.\nReturns the length of <code>self</code>. Like C’s <code>strlen</code>, this does …\nCreates an empty <code>CString</code>.\nConverts a &amp;CStr into a <code>CString</code> by copying the contents …\nConverts a Vec&lt;NonZero&lt;u8&gt;&gt; into a <code>CString</code> without copying …\nConverts a Box&lt;CStr&gt; into a <code>CString</code> without copying or …\nConverts a <code>Cow&lt;&#39;a, CStr&gt;</code> into a <code>CString</code>, by copying the …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreates a C string wrapper from a byte slice with any …\nCreates a C string wrapper from a byte slice with exactly …\nUnsafely creates a C string wrapper from a byte slice.\nWraps a raw C string with a safe C string wrapper.\nRetakes ownership of a <code>CString</code> that was transferred to C …\nCreates a C-compatible string by consuming a byte vector, …\nAttempts to converts a Vec&lt;u8&gt; to a <code>CString</code>.\nConverts a Vec&lt;u8&gt; to a <code>CString</code> without checking the …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConverts this <code>CString</code> into a boxed <code>CStr</code>.\nConsumes the <code>CString</code> and returns the underlying byte …\nEquivalent to <code>CString::into_bytes()</code> except that the …\nConverts a Box&lt;CStr&gt; into a <code>CString</code> without copying or …\nConsumes the <code>CString</code> and transfers ownership of the string …\nConverts the <code>CString</code> into a <code>String</code> if it contains valid …\nConsumes this error, returning the underlying vector of …\nReturns <code>true</code> if <code>self.to_bytes()</code> has a length of 0.\nCreates a new C-compatible string from a container of …\nReturns the position of the nul byte in the slice that …\nConverts this C string to a byte slice.\nConverts this C string to a byte slice containing the …\nYields a &amp;str slice if the <code>CStr</code> contains valid UTF-8.\nConverts a <code>CStr</code> into a Cow&lt;str&gt;.\n<code>O_*</code> constants for use with <code>dup2</code>.\nContains the error value\n<code>errno</code>—An error code.\n<code>FD_*</code> constants for use with <code>fcntl_getfd</code> and <code>fcntl_setfd</code>.\nA buffer type used with <code>Write::write_vectored</code>.\nA buffer type used with <code>Read::read_vectored</code>.\nContains the success value\n<code>RWF_*</code> constants for use with <code>preadv2</code> and <code>pwritev2</code>.\nA specialized <code>Result</code> type for <code>rustix</code> APIs.\nAdvance the internal cursor of the slice.\nAdvance the internal cursor of the slice.\nAdvance a slice of slices.\nAdvance a slice of slices.\nThe unsafe <code>close</code> for raw file descriptors.\n<code>close(raw_fd)</code>—Closes a <code>RawFd</code> directly.\nFunctions which duplicate file descriptors.\n<code>dup(fd)</code>—Creates a new <code>OwnedFd</code> instance that shares the …\n<code>dup2(fd, new)</code>—Changes the file description of a file …\n<code>dup3(fd, new, flags)</code>—Changes the file description of a …\nThe <code>Errno</code> type, which is a minimal wrapper around an error …\nThe Unix <code>fcntl</code> function is effectively lots of different …\n<code>fcntl(fd, F_DUPFD_CLOEXEC)</code>—Creates a new <code>OwnedFd</code> …\n<code>fcntl(fd, F_GETFD)</code>—Returns a file descriptor’s flags.\n<code>fcntl(fd, F_SETFD, flags)</code>—Sets a file descriptor’s …\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThe Unix <code>ioctl</code> function is effectively lots of different …\n<code>ioctl(fd, FIONBIO, &amp;value)</code>—Enables or disables …\n<code>ioctl(fd, FIONREAD)</code>—Returns the number of bytes ready to …\nCreates a new <code>IoSliceMut</code> wrapping a byte slice.\nCreates a new <code>IoSlice</code> wrapping a byte slice.\n<code>pread(fd, buf, offset)</code>—Reads from a file at a given …\n<code>pread(fd, buf, offset)</code>—Reads from a file at a given …\n<code>preadv(fd, bufs, offset)</code>—Reads from a file at a given …\n<code>preadv2(fd, bufs, offset, flags)</code>—Reads data, with …\n<code>pwrite(fd, bufs)</code>—Writes to a file at a given position.\n<code>pwritev(fd, bufs, offset)</code>—Writes to a file at a given …\n<code>pwritev2(fd, bufs, offset, flags)</code>—Writes data, with …\n<code>read(fd, buf)</code>—Reads from a stream.\n<code>read(fd, buf)</code>—Reads from a stream.\n<code>read</code> and <code>write</code>, optionally positioned, optionally vectored.\n<code>readv(fd, bufs)</code>—Reads from a stream into multiple …\nCall <code>f</code> until it either succeeds or fails other than …\n<code>write(fd, buf)</code>—Writes to a stream.\n<code>writev(fd, bufs)</code>—Writes to a stream from multiple …\n<code>close(raw_fd)</code>—Closes a <code>RawFd</code> directly.\n<code>dup(fd)</code>—Creates a new <code>OwnedFd</code> instance that shares the …\n<code>dup2(fd, new)</code>—Changes the file description of a file …\n<code>dup3(fd, new, flags)</code>—Changes the file description of a …\nContains the error value\nContains the success value\nA specialized <code>Result</code> type for <code>rustix</code> APIs.\nCall <code>f</code> until it either succeeds or fails other than …\n<code>fcntl(fd, F_DUPFD_CLOEXEC)</code>—Creates a new <code>OwnedFd</code> …\n<code>fcntl(fd, F_GETFD)</code>—Returns a file descriptor’s flags.\n<code>fcntl(fd, F_SETFD, flags)</code>—Sets a file descriptor’s …\n<code>ioctl(fd, FIONBIO, &amp;value)</code>—Enables or disables …\n<code>ioctl(fd, FIONREAD)</code>—Returns the number of bytes ready to …\nA buffer type used with <code>Write::write_vectored</code>.\nA buffer type used with <code>Read::read_vectored</code>.\n<code>pread(fd, buf, offset)</code>—Reads from a file at a given …\n<code>pread(fd, buf, offset)</code>—Reads from a file at a given …\n<code>preadv(fd, bufs, offset)</code>—Reads from a file at a given …\n<code>preadv2(fd, bufs, offset, flags)</code>—Reads data, with …\n<code>pwrite(fd, bufs)</code>—Writes to a file at a given position.\n<code>pwritev(fd, bufs, offset)</code>—Writes to a file at a given …\n<code>pwritev2(fd, bufs, offset, flags)</code>—Writes data, with …\n<code>read(fd, buf)</code>—Reads from a stream.\n<code>read(fd, buf)</code>—Reads from a stream.\n<code>readv(fd, bufs)</code>—Reads from a stream into multiple …\n<code>write(fd, buf)</code>—Writes to a stream.\n<code>writev(fd, bufs)</code>—Writes to a stream from multiple …\nProvides a bad opcode at compile time.\nTrait for something that provides an <code>ioctl</code> opcode at …\nThe direction that an <code>ioctl</code> is going.\nImplements the traditional “getter” pattern for <code>ioctl</code>s.\nDoes the <code>ioctl</code> mutate any data in the userspace?\nImplements an <code>ioctl</code> that passes an integer into the <code>ioctl</code>.\nA trait defining the properties of an <code>ioctl</code> command.\nThe type used by the <code>ioctl</code> to signify the output.\nImplements an <code>ioctl</code> with no real arguments.\nNone of the above.\nProvides a <code>None</code> code at compile time.\nThe opcode.\nThe opcode used by this <code>ioctl</code> command.\nThe opcode used by an <code>Ioctl</code>.\nThe type of the output data.\nThe type used by the <code>ioctl</code> to signify the command.\nRead data from the kernel.\nProvides a read code at compile time.\nRead and write data to the kernel.\nProvides a read/write code at compile time.\nImplements the pattern for <code>ioctl</code>s where a pointer argument …\nImplements an “updater” pattern for <code>ioctl</code>s.\nWrite data to the kernel.\nProvides a write code at compile time.\nThe opcode.\nThe opcode.\nThe opcode.\nThe opcode.\nThe opcode.\nGet a pointer to the data to be passed to the <code>ioctl</code> …\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreate a new opcode from a direction, group, number, and …\nThe input data.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nPerform an <code>ioctl</code> call.\n<code>ioctl</code> opcode behavior for Linux platforms.\nCreate a new non-mutating opcode from a group, a number, …\nCreate a new old <code>Opcode</code> from a raw opcode.\nThe output data.\nCast the output data to the correct type.\nImplements typical patterns for <code>ioctl</code> usage.\nGet the raw opcode.\nThe raw opcode.\nCreate a new reading opcode from a group, a number and the …\nCreate a new reading and writing opcode from a group, a …\nReference to input/output data.\nThe value to pass in.\nCreate a new writing opcode from a group, a number and the …\nCompose an opcode from its component parts.\nProvides a bad opcode at compile time.\nTrait for something that provides an <code>ioctl</code> opcode at …\nImplements the traditional “getter” pattern for <code>ioctl</code>s.\nImplements an <code>ioctl</code> that passes an integer into the <code>ioctl</code>.\nImplements an <code>ioctl</code> with no real arguments.\nProvides a <code>None</code> code at compile time.\nThe opcode.\nProvides a read code at compile time.\nProvides a read/write code at compile time.\nImplements the pattern for <code>ioctl</code>s where a pointer argument …\nImplements an “updater” pattern for <code>ioctl</code>s.\nProvides a write code at compile time.\nThe opcode.\nThe opcode.\nThe opcode.\nThe opcode.\nThe opcode.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nThe input data.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreate a new no-argument <code>ioctl</code> object.\nCreate a new getter-style <code>ioctl</code> object.\nCreate a new pointer setter-style <code>ioctl</code> object.\nCreate a new pointer updater-style <code>ioctl</code> object.\nCreate a new integer <code>Ioctl</code> helper.\nThe output data.\nReference to input/output data.\nThe value to pass in.\nA buffer type used with <code>Write::write_vectored</code>.\nA buffer type used with <code>Read::read_vectored</code>.\nA trait to borrow the file descriptor from an underlying …\nA trait to extract the raw file descriptor from an …\nA borrowed file descriptor.\nA trait to express the ability to construct an object from …\nA trait to express the ability to consume an object and …\nAn owned file descriptor.\nRaw file descriptors.\nBorrows the file descriptor.\nExtracts the raw file descriptor.\nConstructs a new instance of <code>Self</code> from the given raw file …\nConsumes this object, returning the raw underlying file …\n<code>pid_t</code>—A non-zero Unix process ID.\nA process identifier as a raw integer.\n<code>TC*</code> values for use with <code>tcflow</code>.\nFlags controlling special terminal modes.\n<code>TCSADRAIN</code>—Make the change after all output has been …\n<code>TCSAFLUSH</code>—Discard any pending input and then make the …\n<code>TCIFLUSH</code>—Flush data received but not read.\nA <code>Pid</code> corresponding to the init process (pid 1).\n<code>TCIOFLUSH</code>—<code>IFlush</code> and <code>OFlush</code> combined.\n<code>TCIOFF</code>—Transmits a STOP byte.\n<code>TCION</code>—Transmits a START byte.\nFlags controlling terminal input.\nFlags controlling “local” terminal modes.\n<code>TCSANOW</code>—Make the change immediately.\n<code>TCOFLUSH</code>—Flush data written but not transmitted.\n<code>TCOOFF</code>—Suspend output.\n<code>TCOON</code>—Restart suspended output.\n<code>TCSA*</code> values for use with <code>tcsetattr</code>.\nFlags controlling terminal output.\n<code>pid_t</code>—A non-zero Unix process ID.\n<code>TC*</code> values for use with <code>tcflush</code>.\nIndices for use with <code>Termios::special_codes</code>.\nAn array indexed by <code>SpecialCodeIndex</code> indicating the …\n<code>struct termios</code> for use with <code>tcgetattr</code> and <code>tcsetattr</code>.\n<code>struct winsize</code> for use with <code>tcgetwinsize</code>.\nConverts an <code>Option&lt;Pid&gt;</code> into a <code>RawPid</code>.\nConverts a <code>Pid</code> into a <code>NonZeroI32</code>.\nLow-level configuration flags.\nReturns the argument unchanged.\nCreates a <code>Pid</code> holding the ID of the given child process.\nConverts a <code>RawPid</code> into a <code>Pid</code>.\nConverts a known positive <code>RawPid</code> into a <code>Pid</code>.\nHow is input interpreted?\nSee the <code>input_speed</code> and <code>set_input_seed</code> functions.\nCalls <code>U::from(self)</code>.\nTerminal-related <code>ioctl</code> functions.\n<code>ioctl(fd, TIOCEXCL)</code>—Enables exclusive mode on a terminal.\n<code>ioctl(fd, TIOCNXCL)</code>—Disables exclusive mode on a …\nTest whether this pid represents the init process (pid 1).\n<code>isatty(fd)</code>—Tests whether a file descriptor refers to a …\nLine discipline.\nHigh-level configuration flags.\nHow is output translated?\nSee the <code>output_speed</code> and <code>set_output_seed</code> functions.\nHow are various special control codes handled?\nSpeeds for use with <code>Termios::set_input_speed</code> and …\n<code>tcdrain(fd, duration)</code>—Wait until all pending output has …\n<code>tcflow(fd, action)</code>—Suspend or resume transmission or …\n<code>tcflush(fd, queue_selector)</code>—Wait until all pending …\n<code>tcgetattr(fd)</code>—Get terminal attributes.\n<code>tcgetpgrp(fd)</code>—Get the terminal foreground process group.\n<code>tcgetsid(fd)</code>—Return the session ID of the current …\n<code>tcgetwinsize(fd)</code>—Get the current terminal window size.\n<code>tcsendbreak(fd, 0)</code>—Transmit zero-valued bits.\n<code>tcsetattr(fd)</code>—Set terminal attributes.\n<code>tcsetpgrp(fd, pid)</code>—Set the terminal foreground process …\n<code>tcsetwinsize(fd)</code>—Set the current terminal window size.\nFunctions which operate on file descriptors which might be …\n<code>ioctl(fd, TIOCEXCL)</code>—Enables exclusive mode on a terminal.\n<code>ioctl(fd, TIOCNXCL)</code>—Disables exclusive mode on a …\n<code>B0</code>\n<code>B1000000</code>\n<code>B110</code>\n<code>B115200</code>\n<code>B1152000</code>\n<code>B1200</code>\n<code>B134</code>\n<code>B150</code>\n<code>B1500000</code>\n<code>B1800</code>\n<code>B19200</code>\n<code>B200</code>\n<code>B2000000</code>\n<code>B230400</code>\n<code>B2400</code>\n<code>B2500000</code>\n<code>B300</code>\n<code>B3000000</code>\n<code>B3500000</code>\n<code>B38400</code>\n<code>B4000000</code>\n<code>B460800</code>\n<code>B4800</code>\n<code>B50</code>\n<code>B500000</code>\n<code>B57600</code>\n<code>B576000</code>\n<code>B600</code>\n<code>B75</code>\n<code>B921600</code>\n<code>B9600</code>\n<code>tcdrain(fd, duration)</code>—Wait until all pending output has …\n<code>tcflow(fd, action)</code>—Suspend or resume transmission or …\n<code>tcflush(fd, queue_selector)</code>—Wait until all pending …\n<code>tcgetattr(fd)</code>—Get terminal attributes.\n<code>tcgetpgrp(fd)</code>—Get the terminal foreground process group.\n<code>tcgetsid(fd)</code>—Return the session ID of the current …\n<code>tcgetwinsize(fd)</code>—Get the current terminal window size.\n<code>tcsendbreak(fd, 0)</code>—Transmit zero-valued bits.\n<code>tcsetattr(fd)</code>—Set terminal attributes.\n<code>tcsetpgrp(fd, pid)</code>—Set the terminal foreground process …\n<code>tcsetwinsize(fd)</code>—Set the current terminal window size.\n<code>isatty(fd)</code>—Tests whether a file descriptor refers to a …\n<code>TC*</code> values for use with <code>tcflow</code>.\n<code>BRKINT</code>\n<code>BS0</code>\n<code>BS1</code>\n<code>BSDLY</code>\n<code>CLOCAL</code>\n<code>CMSPAR</code>\n<code>CR0</code>\n<code>CR1</code>\n<code>CR2</code>\n<code>CR3</code>\n<code>CRDLY</code>\n<code>CREAD</code>\n<code>CRTSCTS</code>\n<code>CS5</code>\n<code>CS6</code>\n<code>CS7</code>\n<code>CS8</code>\n<code>CSIZE</code>\n<code>CSTOPB</code>\nFlags controlling special terminal modes.\n<code>TCSADRAIN</code>—Make the change after all output has been …\n<code>ECHO</code>\n<code>ECHOCTL</code>\n<code>ECHOE</code>\n<code>ECHOK</code>\n<code>ECHOKE</code>\n<code>ECHONL</code>\n<code>ECHOPRT</code>\n<code>EXTPROC</code>\n<code>FF0</code>\n<code>FF1</code>\n<code>FFDLY</code>\n<code>FLUSHO</code>\n<code>TCSAFLUSH</code>—Discard any pending input and then make the …\n<code>HUPCL</code>\n<code>ICANON</code>—A flag for the <code>c_lflag</code> field of <code>Termios</code> indicating\n<code>ICRNL</code>\n<code>IEXTEN</code>\n<code>TCIFLUSH</code>—Flush data received but not read.\n<code>IGNBRK</code>\n<code>IGNCR</code>\n<code>IGNPAR</code>\n<code>IMAXBEL</code>\n<code>INLCR</code>\n<code>INPCK</code>\n<code>TCIOFLUSH</code>—<code>IFlush</code> and <code>OFlush</code> combined.\n<code>TCIOFF</code>—Transmits a STOP byte.\n<code>TCION</code>—Transmits a START byte.\n<code>ISIG</code>\n<code>ISTRIP</code>\n<code>IUCLC</code>\n<code>IUTF8</code>\n<code>IXANY</code>\n<code>IXOFF</code>\n<code>IXON</code>\nFlags controlling terminal input.\nFlags controlling “local” terminal modes.\n<code>NL0</code>\n<code>NL1</code>\n<code>NLDLY</code>\n<code>NOFLSH</code>\n<code>TCSANOW</code>—Make the change immediately.\n<code>OCRNL</code>\n<code>OFDEL</code>\n<code>OFILL</code>\n<code>TCOFLUSH</code>—Flush data written but not transmitted.\n<code>OLCUC</code>\n<code>ONLCR</code>\n<code>ONLRET</code>\n<code>ONOCR</code>\n<code>TCOOFF</code>—Suspend output.\n<code>TCOON</code>—Restart suspended output.\n<code>OPOST</code>\n<code>TCSA*</code> values for use with <code>tcsetattr</code>.\nFlags controlling terminal output.\n<code>PARENB</code>\n<code>PARMRK</code>\n<code>PARODD</code>\n<code>PENDIN</code>\n<code>TC*</code> values for use with <code>tcflush</code>.\nIndices for use with <code>Termios::special_codes</code>.\nAn array indexed by <code>SpecialCodeIndex</code> indicating the …\n<code>TAB0</code>\n<code>TAB1</code>\n<code>TAB2</code>\n<code>TAB3</code>\n<code>TABDLY</code>\n<code>TOSTOP</code>\n<code>struct termios</code> for use with <code>tcgetattr</code> and <code>tcsetattr</code>.\n<code>VDISCARD</code>\n<code>VEOF</code>\n<code>VEOL</code>\n<code>VEOL2</code>\n<code>VERASE</code>\n<code>VINTR</code>\n<code>VKILL</code>\n<code>VLNEXT</code>\n<code>VMIN</code>\n<code>VQUIT</code>\n<code>VREPRINT</code>\n<code>VSTART</code>\n<code>VSTOP</code>\n<code>VSUSP</code>\n<code>VSWTC</code>\n<code>VT0</code>\n<code>VT1</code>\n<code>VTDLY</code>\n<code>VTIME</code>\n<code>VWERASE</code>\n<code>struct winsize</code> for use with <code>tcgetwinsize</code>.\n<code>XCASE</code>\n<code>XTABS</code>\nGet a flags value with all known bits set.\nGet a flags value with all known bits set.\nGet a flags value with all known bits set.\nGet a flags value with all known bits set.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nGet the underlying bits value.\nGet the underlying bits value.\nGet the underlying bits value.\nGet the underlying bits value.\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nWhether all set bits in a source flags value are also set …\nWhether all set bits in a source flags value are also set …\nWhether all set bits in a source flags value are also set …\nWhether all set bits in a source flags value are also set …\nLow-level configuration flags.\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nGet a flags value with all bits unset.\nGet a flags value with all bits unset.\nGet a flags value with all bits unset.\nGet a flags value with all bits unset.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nConvert from a bits value.\nConvert from a bits value.\nConvert from a bits value.\nConvert from a bits value.\nConvert from a bits value exactly.\nConvert from a bits value exactly.\nConvert from a bits value exactly.\nConvert from a bits value exactly.\nConvert from a bits value, unsetting any unknown bits.\nConvert from a bits value, unsetting any unknown bits.\nConvert from a bits value, unsetting any unknown bits.\nConvert from a bits value, unsetting any unknown bits.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nGet a flags value with the bits of a flag with the given …\nGet a flags value with the bits of a flag with the given …\nGet a flags value with the bits of a flag with the given …\nGet a flags value with the bits of a flag with the given …\nHow is input interpreted?\nReturn the input communication speed.\nSee the <code>input_speed</code> and <code>set_input_seed</code> functions.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nWhether any set bits in a source flags value are also set …\nWhether any set bits in a source flags value are also set …\nWhether any set bits in a source flags value are also set …\nWhether any set bits in a source flags value are also set …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nWhether all known bits in this flags value are set.\nWhether all known bits in this flags value are set.\nWhether all known bits in this flags value are set.\nWhether all known bits in this flags value are set.\nWhether all bits in this flags value are unset.\nWhether all bits in this flags value are unset.\nWhether all bits in this flags value are unset.\nWhether all bits in this flags value are unset.\nYield a set of contained flags values.\nYield a set of contained flags values.\nYield a set of contained flags values.\nYield a set of contained flags values.\nYield a set of contained named flags values.\nYield a set of contained named flags values.\nYield a set of contained named flags values.\nYield a set of contained named flags values.\nLine discipline.\nHigh-level configuration flags.\n<code>cfmakeraw(self)</code>—Set a <code>Termios</code> value to the settings for …\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nHow is output translated?\nReturn the output communication speed.\nSee the <code>output_speed</code> and <code>set_output_seed</code> functions.\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nCall <code>insert</code> when <code>value</code> is <code>true</code> or <code>remove</code> when <code>value</code> is …\nCall <code>insert</code> when <code>value</code> is <code>true</code> or <code>remove</code> when <code>value</code> is …\nCall <code>insert</code> when <code>value</code> is <code>true</code> or <code>remove</code> when <code>value</code> is …\nCall <code>insert</code> when <code>value</code> is <code>true</code> or <code>remove</code> when <code>value</code> is …\nSet the input communication speed.\nSet the output communication speed.\nSet the input and output communication speeds.\nHow are various special control codes handled?\nSpeeds for use with <code>Termios::set_input_speed</code> and …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\n<code>B0</code>\n<code>B1000000</code>\n<code>B110</code>\n<code>B115200</code>\n<code>B1152000</code>\n<code>B1200</code>\n<code>B134</code>\n<code>B150</code>\n<code>B1500000</code>\n<code>B1800</code>\n<code>B19200</code>\n<code>B200</code>\n<code>B2000000</code>\n<code>B230400</code>\n<code>B2400</code>\n<code>B2500000</code>\n<code>B300</code>\n<code>B3000000</code>\n<code>B3500000</code>\n<code>B38400</code>\n<code>B4000000</code>\n<code>B460800</code>\n<code>B4800</code>\n<code>B50</code>\n<code>B500000</code>\n<code>B57600</code>\n<code>B576000</code>\n<code>B600</code>\n<code>B75</code>\n<code>B921600</code>\n<code>B9600</code>\nTranslate from a <code>c::speed_t</code> code to an arbitrary integer …\nTranslate from an arbitrary <code>u32</code> arbitrary integer speed …\nConvert a <code>&amp;mut T</code> into a <code>*mut T</code> without using an <code>as</code>.\nConvert a <code>&amp;T</code> into a <code>*const T</code> without using an <code>as</code>.\nConvert a <code>*mut c_void</code> to a <code>*mut T</code>, checking that it is not …\nCreate a union value containing a default value in one of …\nConvert an <code>Option&lt;&amp;mut T&gt;</code> into a possibly-null <code>*mut T</code>.\nConvert an <code>Option&lt;&amp;T&gt;</code> into a possibly-null <code>*const T</code>.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nA combination of <code>weakcall</code> and <code>syscall</code>. Use the libc …")