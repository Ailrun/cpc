searchState.loadedDescShard("insta", 0, "What are snapshot tests\nSnapshot metadata information.\nConfigures how insta operates at test time.\nA helper to work with file snapshots.\nUtility macro to permit a multi-snapshot run where all …\n(Experimental) Asserts a binary snapshot in the form of a …\nAsserts a <code>Debug</code> snapshot in compact format.\nAsserts a <code>Debug</code> snapshot.\nAsserts a <code>Display</code> snapshot.\nAsserts a <code>serde::Serialize</code> snapshot in RON format.\nAsserts a <code>String</code> snapshot.\nThe source line, if available. This is used by pending …\nThis module implements a generic <code>Content</code> type that can hold\nOptional human readable (non formatted) snapshot …\nOptionally the expression that created the snapshot.\nAn optional arbitrary structured info object.\nReference to the input file.\nExposes some library internals.\nThe type of the snapshot (string or binary).\nThe source file (relative to workspace root).\nSettings configuration macro.\nRepresents variable typed content.\nAn internal error type for content related errors.\nReturns the value as bool\nReturns the value as bytes\nReturns the value as f64\nReturns the value as i128\nReturns the value as i64\nReturns the value as slice of content values.\nReturns the value as string\nReturns the value as u128\nReturns the value as u64\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns true if the value is nil.\nThis resolves the innermost content in a chain of wrapped …\nMutable version of <code>Self::resolve_inner</code>.\nRecursively walks the content structure mutably.\nThe maximum number of characters to print in a single line …\nSerializes a serializable to JSON.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreates a new <code>Serializer</code> that writes into the given writer.\nSerializes a value to JSON.\nSerializes a value to JSON in single-line format.\nSerializes a value to JSON pretty\nNeeded because <code>std::mem::discriminant</code> is not <code>Ord</code>\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCopyright 2015, Yuheng Chen. Apache 2 licensed.\nContains the error value\nContains the success value\nEmit a yaml as a hash or array value: i.e., which should …\nFrom [<code>serialize::json</code>]\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCheck if the string requires quoting.\nRefer to an anchor ID\nContains the error value\n<code>Event</code> is used with the low-level event base parsing API, …\nAnchor ID\nContains the success value\nValue, style, anchor ID, tag\nAnchor ID\nReserved for internal use\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nContains the error value\nContains the success value\nhandle, suffix\nhandle, prefix\nmajor, minor\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreates the YAML tokenizer.\nYAML array, can be accessed as a <code>Vec</code>.\nAccessing a nonexistent node via the Index trait returns …\nYAML bool, e.g. <code>true</code> or <code>false</code>.\nYAML hash, can be accessed as a <code>LinkedHashMap</code>.\nYAML int is stored as i64.\nYAML null, e.g. <code>null</code> or <code>~</code>.\nFloat types are stored as <code>String</code> and parsed on demand. …\nYAML scalar.\nA YAML node is stored as this <code>Yaml</code> enumeration, which …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nDiff only\nSnapshots are updated in-place\nThe most minimal output\nSnapshots are placed in a new file with a .new suffix\nSnapshots are not updated at all.\nNo output at all\nControls how information is supposed to be displayed.\nSnapshot update flag\nHow snapshots are supposed to be updated\nShort summary\nRepresents a tool configuration.\nIs insta instructed to fail in tests?\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nLoads the tool config from a cargo workspace.\nReturns the cargo workspace path for a crate manifest, like\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nMemoizes a snapshot file in the reference file, as part of …\nReturns the intended output behavior for insta.\nShould we fail if metadata doesn’t match?\nReturns the intended snapshot update behavior.\nReturns the intended snapshot update behavior.\nSpecial marker to use an automatic name.\nRepresents variable typed content.\nSnapshot metadata information.\nReturned from <code>Settings::bind_to_scope</code>\nThe contents of a Snapshot\nThe source line, if available. This is used by pending …\nOptional human readable (non formatted) snapshot …\nOptionally the expression that created the snapshot.\nAn optional arbitrary structured info object.\nReference to the input file.\nThe type of the snapshot (string or binary).\nThe source file (relative to workspace root).\nSnapshot printer utility.\nEncodes a path as an OSC-8 escape sequence. This makes it …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nPrints the summary of a snapshot\nSpecial marker to use an automatic name.\nA binary snapshot that gets stored as a separate file next …\nA text snapshot that gets stored along with the metadata …\nAn inline snapshot.\nNo value.\nThe context around a snapshot, such as the reference …\nThe name of a snapshot, from which the path is derived.\nSome value of type <code>T</code>.\nTest snapshots in doctests.\nIf there is a suffix on the settings, append it to the …\nDo we allow recording of duplicates?\nThis function is invoked from the macros to run the main …\nCleanup logic for passing snapshots.\nRemoves any old .snap.new.* files that belonged to …\nFinalizes the assertion when the snapshot comparison …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nGiven a path returns the local path within the workspace.\nCreates the new snapshot from input values.\nThis prints the information about the snapshot\nWrites the changes of the snapshot back.\nHelper function to support perfect duplicate detection.\nThe new generated value to compare against any previously …\nThe new generated value to compare against any previously …\nThe new generated value to compare against any previously …\nThe extension of the separate file.\nThe reference content from the macro invocation that will …\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConfigures how insta operates at test time.\nReturned from <code>Settings::bind_to_scope</code>\nRuns a function with the current settings bound to the …\nLike <code>Self::bind</code> but for futures.\nBinds the settings to the current thread and resets when …\nReturns a copy of the current settings.\nReturns the current description\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the current info\nReturns the current info\nReturns the current input file reference.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns the default settings.\nReturns true if expressions are omitted from snapshots.\nReturns the current value for module name prepending.\nRemoves the description.\nRemoves the info.\nRemoves the input file reference.\nRemoves the snapshot suffix.\nSets the description.\nSets the info.\nSets the input file reference.\nIf set to true, does not retain the expression in the …\nDisables prepending of modules to the snapshot filename.\nSets the info from a content object.\nSets the snapshot path.\nSets the snapshot suffix.\nEnables forceful sorting of maps before serialization.\nReturns the snapshot path.\nReturns the current snapshot suffix.\nReturns the current value for map sorting.\nRuns a function with the current settings.\nSnapshot metadata information.\nHolds a pending inline snapshot loaded from a json file or …\nA helper to work with file snapshots.\nThe contents of a Snapshot\nReturns the assertion line.\nThe source line, if available. This is used by pending …\nThe snapshot contents\nReturns the description that created the snapshot.\nOptional human readable (non formatted) snapshot …\nReturns the expression that created the snapshot.\nOptionally the expression that created the snapshot.\nReturns the snapshot contents as a normalized string (for …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nLoads a snapshot from a file.\nReturns the relative source path.\nAn optional arbitrary structured info object.\nReturns the input file reference.\nReference to the input file.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nlegacy format - retain so old snapshots still work\nSnapshot contents match another snapshot’s.\nBoth the exact snapshot contents and the persisted …\nSnapshot matches based on the latest format.\nThe metadata in the snapshot.\nReturns the module name.\nExtracts the module and snapshot name from a snapshot path\nRemoves excess indentation, and changes newlines to \\n.\nThe number of <code>#</code> we need to surround a raw string literal …\nSame as <code>Self::save</code> but instead of writing a normal …\nThe type of the snapshot (string or binary).\nReturns the snapshot name.\nReturns the absolute source path.\nThe source file (relative to workspace root).\nReturns the string literal, including <code>#</code> delimiters, to …\nTrims the metadata of fields that we don’t save to <code>.snap</code> …\nTries to format a given rust expression with rustfmt\nAre we running in in a CI environment?\nConverts a path into a string that can be persisted.\nWraps an object for formatting for styling.\nReturns the term width that insta should use.")