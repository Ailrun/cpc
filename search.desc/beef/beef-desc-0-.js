searchState.loadedDescShard("beef", 0, "Faster, more compact implementation of <code>Cow</code>.\nCompact three word <code>Cow</code> that puts the ownership tag in …\nCapacity field. For <code>beef::lean::Cow</code> this is 0-sized!\nThis usize contains length, but it may contain other …\nThis module contains the actual, albeit generic, …\nNamespace containing the 2-word <code>Cow</code> implementation.\nLifetime marker\nPointer to data\nA clone-on-write smart pointer, mostly compatible with …\nInternal convenience method for casting <code>ptr</code> into a <code>&amp;T</code>\nBorrowed data.\nCapacity field. For <code>beef::lean::Cow</code> this is 0-sized!\nBorrowed data.\nBorrowed data.\nThis usize contains length, but it may contain other …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nExtracts the owned data.\nReturns <code>true</code> if data is borrowed or had no capacity.\nReturns <code>true</code> if data is owned and has non-0 capacity.\nLifetime marker\nOwned data.\nPointer to data\nExtracts borrowed data.\nFaster, 2-word <code>Cow</code>. This version is available only on …\nCapacity field. For <code>beef::lean::Cow</code> this is 0-sized!\nThis usize contains length, but it may contain other …\nLifetime marker\nPointer to data\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nHelper trait required by <code>Cow&lt;T&gt;</code> to extract capacity of …\nRebuild <code>T::Owned</code> from <code>NonNull&lt;T&gt;</code> and <code>capacity</code>. This can be …\nConvert <code>T::Owned</code> to <code>NonNull&lt;T&gt;</code> and capacity. Return <code>None</code> …\nCompact three word <code>Cow</code> that puts the ownership tag in …\nCapacity field. For <code>beef::lean::Cow</code> this is 0-sized!\nThis usize contains length, but it may contain other …\nLifetime marker\nPointer to data\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.")